user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log debug;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    resolver 10.0.2.3 valid=30s;

    # Enhanced logging format to better track request flow
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" '
                       'forwarded_for="$http_x_forwarded_for" '
                       'real_ip="$remote_addr" '
                       'x_real_ip="$http_x_real_ip" '
                       'request_time=$request_time';
    access_log /var/log/nginx/access.log detailed;

    # TLS configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Additional security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    # CORS origin mapping
    map $http_origin $cors_origin {
        default "";
        "https://mainnet.rodit.org:6443" "$http_origin";
        "https://mainnet.rodit.org:2443" "$http_origin";
        "https://server.discernible.io:2443" "$http_origin";
        "https://purchase.discernible.io:4443" "$http_origin";
        "https://timeherenow.rodit.org:8443" "$http_origin";
    }

    server {
        listen 8443 ssl;
        http2 on;
        server_name timeherenow.rodit.org;
        ssl_certificate /app/certs/fullchain.pem;
        ssl_certificate_key /app/certs/privkey.pem;

        # Security: prevent exposure of sensitive headers
        proxy_hide_header X-Powered-By;

        location / {
            # Handle CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Origin, X-Requested-With, Accept, X-RODIT-Token' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=utf-8';
                return 204;
            }

            # Add CORS headers for actual requests
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            proxy_pass http://timeherenow-container:8080;
            proxy_http_version 1.1;

            # Proxy headers with explicit order
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Error handling
            proxy_intercept_errors on;
            error_page 502 504 = @handle_error;
        }

        location @handle_error {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            return 502;
        }
    }
}